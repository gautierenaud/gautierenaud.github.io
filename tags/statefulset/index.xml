<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>statefulset on RGDG</title><link>https://gautierenaud.github.io/tags/statefulset/</link><description>Recent content in statefulset on RGDG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 14 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://gautierenaud.github.io/tags/statefulset/index.xml" rel="self" type="application/rss+xml"/><item><title>02-02 Project Skeleton - Kafka</title><link>https://gautierenaud.github.io/devops_sandbox/02-02-project-skeleton-kafka/</link><pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate><guid>https://gautierenaud.github.io/devops_sandbox/02-02-project-skeleton-kafka/</guid><description>Kafka What is one of the component I often use at work? You guessed it, Kafka. For those who don&amp;rsquo;t know, Kafka can be seen as a messaging system (the exact term is streaming platform), where some will publish messages (Producers) while others will process them (Consumers). It is made to scale, so it is obviously overkill for a personal project, but the goal was to experiment with it. Also, I will not delve here into the details of Kafka now (maybe when I tackle Observability?</description></item><item><title>02-03 Project Skeleton - PostgreSQL</title><link>https://gautierenaud.github.io/devops_sandbox/02-03-project-skeleton-postgresql/</link><pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate><guid>https://gautierenaud.github.io/devops_sandbox/02-03-project-skeleton-postgresql/</guid><description>PostgreSQL I&amp;rsquo;ve chosen PostgreSQL for the same reason as Kafka: I&amp;rsquo;m used to it from my day-to-day work. I will also use a Statefulset for this deployment, but I&amp;rsquo;ll leave the redundancy for later. As with KRaft, I learned the hard way that redundancy is not magical, but that I need to configure it myself.
Service service.yaml
apiVersion: v1 kind: Service metadata: name: postgres-svc labels: app: postgres-app spec: clusterIP: None ports: - name: &amp;#39;5432&amp;#39; port: 5432 protocol: TCP targetPort: 5432 selector: app: postgres-app Again, a Headless service (as with Kafka).</description></item></channel></rss>